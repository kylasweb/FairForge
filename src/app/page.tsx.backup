'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Loader2, Download, Sparkles, Box, Palette, Zap, Cloud, CloudOff, User, LogOut, PenTool, RefreshCw, Eraser, Expand, Wand2, Settings, Trash2, Edit3, Layers, Grid3x3, Monitor, Smartphone, Tablet, Upload, Code, Screenshot, FileText, Wand3 } from 'lucide-react'
import { toast } from 'sonner'
import { initializePuter, saveIconToPuter, getPuterFiles, getPuterAuthStatus, signInToPuter, signOutFromPuter, type PuterFile } from '@/lib/puter-integration'

// UI/UX Generation Templates
const uiGenerationTemplates = {
  textToUI: [
    { name: 'Login Screen', prompt: 'Create a modern login screen for a mobile app with email/password fields, social login buttons, and clean design' },
    { name: 'E-commerce Product Page', prompt: 'Design a product details page for an e-commerce app with product images, price, description, and add to cart button' },
    { name: 'Dashboard Analytics', prompt: 'Create a dashboard interface with charts, metrics cards, and data visualization for analytics platform' },
    { name: 'Social Media Feed', prompt: 'Design a social media feed with posts, user interactions, stories, and navigation elements' },
    { name: 'Banking App', prompt: 'Create a banking app interface with account balance, transaction history, and transfer functionality' }
  ],
  wireframeToUI: [
    { name: 'App Wireframe', prompt: 'Convert hand-drawn app wireframe to clean digital UI with proper spacing and modern design' },
    { name: 'Website Layout', prompt: 'Transform website wireframe sketch into polished web design with navigation and content sections' },
    { name: 'Form Design', prompt: 'Convert form wireframe to styled UI with proper input fields, labels, and validation states' },
    { name: 'Navigation Flow', prompt: 'Transform navigation wireframe into interactive UI with menu items and user flow' }
  ],
  screenshotToUI: [
    { name: 'App Redesign', prompt: 'Recreate and improve this app screenshot with modern design principles and better UX' },
    { name: 'Website Clone', prompt: 'Convert website screenshot to editable UI design with component-based structure' },
    { name: 'Component Extraction', prompt: 'Extract and recreate UI components from this screenshot as reusable design elements' }
  ]
}

const uiPlatformOptions = [
  { value: 'web', label: 'Web Design', icon: Monitor },
  { value: 'mobile', label: 'Mobile App', icon: Smartphone },
  { value: 'tablet', label: 'Tablet Design', icon: Tablet },
  { value: 'responsive', label: 'Responsive Design', icon: Grid3x3 }
]

const uiStyleOptions = [
  { value: 'modern', label: 'Modern', icon: Sparkles },
  { value: 'minimalist', label: 'Minimalist', icon: Box },
  { value: 'material', label: 'Material Design', icon: Palette },
  { value: 'ios', label: 'iOS Style', icon: Smartphone },
  { value: 'bootstrap', label: 'Bootstrap', icon: Code },
  { value: 'tailwind', label: 'Tailwind CSS', icon: Code }
]

const promptTemplates = {
  minimalist: [
    { name: 'Home Icon', prompt: 'Create a minimalist 3D home icon, clean lines, soft shadows, modern design' },
    { name: 'Settings', prompt: 'Generate a 3D settings gear icon, minimalist style, smooth rotation, metallic finish' },
    { name: 'User Profile', prompt: 'Design a 3D user profile icon, simple silhouette, gradient colors, elegant' },
    { name: 'Mail', prompt: 'Create a 3D envelope icon, minimalist, paper texture, subtle depth' },
    { name: 'Heart', prompt: 'Generate a 3D heart icon, clean geometry, soft pink gradient, modern' }
  ],
  realistic: [
    { name: 'Camera', prompt: 'Create a photorealistic 3D camera icon, detailed lens, metallic body, studio lighting' },
    { name: 'Coffee Cup', prompt: 'Generate a realistic 3D coffee cup, ceramic material, steam effects, warm lighting' },
    { name: 'Headphones', prompt: 'Design a realistic 3D headphones icon, detailed texture, leather cushions, metallic accents' },
    { name: 'Watch', prompt: 'Create a photorealistic 3D smartwatch, detailed screen, metal band, premium materials' },
    { name: 'Sneaker', prompt: 'Generate a realistic 3D sneaker icon, detailed texture, rubber sole, dynamic pose' }
  ],
  cartoon: [
    { name: 'Star', prompt: 'Create a cute 3D cartoon star icon, bright colors, playful style, smooth surfaces' },
    { name: 'Rocket', prompt: 'Generate a 3D cartoon rocket ship, colorful, friendly design, exhaust flames' },
    { name: 'Rainbow', prompt: 'Design a 3D cartoon rainbow icon, vibrant colors, fluffy clouds, cheerful' },
    { name: 'Ice Cream', prompt: 'Create a 3D cartoon ice cream cone, sprinkles, melting effect, fun style' },
    { name: 'Pizza', prompt: 'Generate a 3D cartoon pizza slice, melted cheese, pepperoni, delicious look' }
  ],
  futuristic: [
    { name: 'AI Brain', prompt: 'Create a futuristic 3D AI brain icon, glowing circuits, neural network, holographic' },
    { name: 'Cyber Eye', prompt: 'Generate a futuristic 3D cybernetic eye, LED lights, metallic details, sci-fi' },
    { name: 'Data Cube', prompt: 'Design a futuristic 3D data cube, holographic display, floating particles, tech' },
    { name: 'Quantum', prompt: 'Create a futuristic 3D quantum icon, energy particles, glowing effects, abstract' },
    { name: 'Network', prompt: 'Generate a futuristic 3D network icon, connected nodes, data streams, digital' }
  ],
  neon: [
    { name: 'Neon Heart', prompt: 'Create a neon 3D heart icon, glowing pink and blue lights, dark background, cyberpunk aesthetic' },
    { name: 'Neon Star', prompt: 'Generate a neon 3D star icon, bright glowing edges, electric blue, vibrant lighting' },
    { name: 'Neon Lightning', prompt: 'Design a neon 3D lightning bolt icon, electric yellow glow, dramatic lighting effects' },
    { name: 'Neon Moon', prompt: 'Create a neon 3D crescent moon icon, purple and pink glow, mystical atmosphere' },
    { name: 'Neon Flame', prompt: 'Generate a neon 3D flame icon, orange and red glow, fire effects, intense lighting' }
  ],
  vintage: [
    { name: 'Vintage Camera', prompt: 'Create a vintage 3D camera icon, retro design, brass finish, aged texture, classic' },
    { name: 'Vintage Phone', prompt: 'Generate a vintage 3D rotary phone icon, antique black, retro styling, nostalgic' },
    { name: 'Vintage Car', prompt: 'Design a vintage 3D car icon, 1950s style, pastel colors, classic automobile' },
    { name: 'Vintage Watch', prompt: 'Create a vintage 3D pocket watch icon, gold finish, ornate details, timeless' },
    { name: 'Vintage Radio', prompt: 'Generate a vintage 3D radio icon, wooden case, retro dials, nostalgic charm' }
  ],
  glassmorphism: [
    { name: 'Glass Heart', prompt: 'Create a glassmorphism 3D heart icon, translucent glass, frosted edges, soft blur' },
    { name: 'Glass Cube', prompt: 'Generate a glassmorphism 3D cube icon, transparent glass, colored reflections, modern' },
    { name: 'Glass Sphere', prompt: 'Design a glassmorphism 3D sphere icon, crystal clear, light refractions, elegant' },
    { name: 'Glass Diamond', prompt: 'Create a glassmorphism 3D diamond icon, faceted glass, prism effects, luxury' },
    { name: 'Glass Star', prompt: 'Generate a glassmorphism 3D star icon, translucent material, glowing core, ethereal' }
  ],
  pixelArt: [
    { name: 'Pixel Sword', prompt: 'Create a pixel art 3D sword icon, 8-bit style, blocky pixels, retro gaming' },
    { name: 'Pixel Mushroom', prompt: 'Generate a pixel art 3D mushroom icon, classic gaming, red spots, pixelated' },
    { name: 'Pixel Ghost', prompt: 'Design a pixel art 3D ghost icon, cute retro style, white pixels, friendly' },
    { name: 'Pixel Coin', prompt: 'Create a pixel art 3D coin icon, golden pixels, retro arcade, collectible' },
    { name: 'Pixel Heart', prompt: 'Generate a pixel art 3D heart icon, 8-bit style, pink pixels, nostalgic' }
  ]
}

// Industry-specific templates
const industryTemplates = {
  it: [
    { name: 'Server', prompt: 'Create a 3D server rack icon, professional IT equipment, blue LED lights, modern data center' },
    { name: 'Cloud Computing', prompt: 'Generate a 3D cloud computing icon, fluffy cloud with digital elements, tech blue, connectivity' },
    { name: 'Database', prompt: 'Design a 3D database icon, cylindrical servers, data visualization, professional blue' },
    { name: 'Cybersecurity', prompt: 'Create a 3D cybersecurity shield icon, protective barrier, digital lock, security blue' },
    { name: 'API', prompt: 'Generate a 3D API icon, connected nodes, data flow, technical diagram, modern tech' },
    { name: 'Code', prompt: 'Design a 3D code icon, brackets and syntax, programming elements, developer tools' },
    { name: 'Network', prompt: 'Create a 3D network icon, connected devices, mesh network, infrastructure' },
    { name: 'Algorithm', prompt: 'Generate a 3D algorithm icon, flowchart elements, logical patterns, computational' }
  ],
  medical: [
    { name: 'Medical Cross', prompt: 'Create a 3D medical cross icon, red cross emblem, healthcare professional, clean design' },
    { name: 'Heartbeat', prompt: 'Generate a 3D heartbeat icon, ECG waveform, medical monitoring, vital signs' },
    { name: 'DNA Helix', prompt: 'Design a 3D DNA helix icon, genetic structure, medical research, scientific' },
    { name: 'Pill', prompt: 'Create a 3D pill icon, medicine capsule, pharmaceutical, healthcare treatment' },
    { name: 'Stethoscope', prompt: 'Generate a 3D stethoscope icon, medical instrument, doctor tool, healthcare' },
    { name: 'Medical Kit', prompt: 'Design a 3D medical first aid kit icon, emergency supplies, healthcare ready' },
    { name: 'Syringe', prompt: 'Create a 3D syringe icon, medical injection, vaccination, healthcare tool' },
    { name: 'Hospital', prompt: 'Generate a 3D hospital building icon, healthcare facility, medical center' }
  ],
  hospitality: [
    { name: 'Hotel Building', prompt: 'Create a 3D hotel building icon, hospitality industry, accommodation service' },
    { name: 'Restaurant', prompt: 'Generate a 3D restaurant icon, dining establishment, food service, chef hat' },
    { name: 'Bed', prompt: 'Design a 3D bed icon, hotel room, comfortable accommodation, hospitality' },
    { name: 'Food Tray', prompt: 'Create a 3D food tray icon, room service, hotel dining, hospitality service' },
    { name: 'Bell', prompt: 'Generate a 3D service bell icon, hotel reception, customer service, hospitality' },
    { name: 'Key Card', prompt: 'Design a 3D hotel key card icon, room access, hospitality security' },
    { name: 'Concierge', prompt: 'Create a 3D concierge desk icon, hotel service, guest assistance, luxury' },
    { name: 'Spa', prompt: 'Generate a 3D spa icon, wellness center, relaxation, hospitality amenities' }
  ],
  ai: [
    { name: 'Neural Network', prompt: 'Create a 3D neural network icon, connected nodes, AI brain, machine learning' },
    { name: 'Robot Head', prompt: 'Generate a 3D robot head icon, artificial intelligence, futuristic tech, smart AI' },
    { name: 'AI Chip', prompt: 'Design a 3D AI processor chip icon, neural processor, computing hardware, AI tech' },
    { name: 'Machine Learning', prompt: 'Create a 3D machine learning icon, data patterns, algorithm visualization, AI learning' },
    { name: 'Deep Learning', prompt: 'Generate a 3D deep learning icon, layered networks, AI architecture, advanced tech' },
    { name: 'Chatbot', prompt: 'Design a 3D chatbot icon, conversational AI, messaging interface, smart assistant' },
    { name: 'Computer Vision', prompt: 'Create a 3D computer vision icon, eye recognition, AI sight, visual intelligence' },
    { name: 'AI Assistant', prompt: 'Generate a 3D AI assistant icon, helpful robot, smart helper, digital assistant' }
  ]
}

// Logo-specific templates
const logoTemplates = {
  modern: [
    { name: 'Tech Startup', prompt: 'Modern tech logo with abstract shapes, clean typography, innovative design' },
    { name: 'Consulting Firm', prompt: 'Professional consulting logo, minimalist design, trustworthy appearance' },
    { name: 'E-commerce Brand', prompt: 'Modern e-commerce logo, shopping elements, digital commerce focus' },
    { name: 'Software Company', prompt: 'Software company logo, code elements, digital innovation theme' },
    { name: 'Financial Services', prompt: 'Financial services logo, secure design, professional appearance' }
  ],
  vintage: [
    { name: 'Coffee Shop', prompt: 'Vintage coffee shop logo, retro typography, warm and inviting' },
    { name: 'Barbershop', prompt: 'Classic barbershop logo, traditional design, vintage barber elements' },
    { name: 'Bakery', prompt: 'Vintage bakery logo, retro baking elements, nostalgic feel' },
    { name: 'Bookstore', prompt: 'Classic bookstore logo, literary elements, timeless design' },
    { name: 'Restaurant', prompt: 'Vintage restaurant logo, classic dining elements, heritage feel' }
  ],
  luxury: [
    { name: 'Jewelry Brand', prompt: 'Luxury jewelry logo, elegant typography, premium materials' },
    { name: 'Hotel Chain', prompt: 'Luxury hotel logo, sophisticated design, premium hospitality' },
    { name: 'Fashion Brand', prompt: 'High fashion logo, elegant typography, luxury style' },
    { name: 'Real Estate', prompt: 'Luxury real estate logo, premium property design, sophisticated' },
    { name: 'Winery', prompt: 'Premium winery logo, elegant wine elements, luxury branding' }
  ],
  tech: [
    { name: 'AI Company', prompt: 'AI technology logo, neural network elements, futuristic design' },
    { name: 'Cybersecurity', prompt: 'Cybersecurity logo, shield elements, digital protection theme' },
    { name: 'Cloud Services', prompt: 'Cloud computing logo, cloud elements, digital infrastructure' },
    { name: 'Mobile App', prompt: 'Mobile app logo, app interface elements, user-friendly design' },
    { name: 'Data Analytics', prompt: 'Data analytics logo, chart elements, insights visualization' }
  ],
  organic: [
    { name: 'Organic Food', prompt: 'Organic food logo, natural elements, green and earthy tones' },
    { name: 'Yoga Studio', prompt: 'Yoga studio logo, zen elements, peaceful and natural design' },
    { name: 'Eco Products', prompt: 'Eco-friendly products logo, sustainability elements, green design' },
    { name: 'Natural Beauty', prompt: 'Natural beauty logo, organic elements, clean and fresh' },
    { name: 'Garden Center', prompt: 'Garden center logo, plant elements, natural growth theme' }
  ],
  geometric: [
    { name: 'Architecture Firm', prompt: 'Geometric architecture logo, structural elements, precise design' },
    { name: 'Engineering Company', prompt: 'Engineering logo, technical elements, geometric precision' },
    { name: 'Construction', prompt: 'Construction logo, building elements, geometric shapes' },
    { name: 'Manufacturing', prompt: 'Manufacturing logo, industrial elements, geometric design' },
    { name: 'Design Studio', prompt: 'Design studio logo, creative geometry, artistic precision' }
  ],
  handwritten: [
    { name: 'Artisan Bakery', prompt: 'Handwritten bakery logo, custom typography, personal touch' },
    { name: 'Craft Store', prompt: 'Handwritten craft store logo, artistic elements, creative feel' },
    { name: 'Personal Blog', prompt: 'Personal blog logo, handwritten style, unique character' },
    { name: 'Photography', prompt: 'Photography logo, artistic handwriting, creative expression' },
    { name: 'Wedding Planner', prompt: 'Wedding planner logo, elegant handwriting, romantic feel' }
  ],
  bold: [
    { name: 'Sports Brand', prompt: 'Bold sports logo, strong typography, athletic energy' },
    { name: 'Fitness Gym', prompt: 'Bold fitness logo, powerful design, strength theme' },
    { name: 'Security Company', prompt: 'Bold security logo, protective elements, strong appearance' },
    { name: 'Automotive', prompt: 'Bold automotive logo, speed elements, powerful design' },
    { name: 'Construction', prompt: 'Bold construction logo, industrial strength, reliable design' }
  ]
}

const styleOptions = [
  { value: 'minimalist', label: 'Minimalist', icon: Box },
  { value: 'realistic', label: 'Realistic', icon: Palette },
  { value: 'cartoon', label: 'Cartoon', icon: Sparkles },
  { value: 'futuristic', label: 'Futuristic', icon: Zap },
  { value: 'neon', label: 'Neon', icon: Zap },
  { value: 'vintage', label: 'Vintage', icon: Box },
  { value: 'glassmorphism', label: 'Glassmorphism', icon: Sparkles },
  { value: 'pixelArt', label: 'Pixel Art', icon: Box }
]

const logoStyleOptions = [
  { value: 'modern', label: 'Modern', icon: Box },
  { value: 'vintage', label: 'Vintage', icon: Box },
  { value: 'luxury', label: 'Luxury', icon: Sparkles },
  { value: 'tech', label: 'Tech', icon: Zap },
  { value: 'organic', label: 'Organic', icon: Palette },
  { value: 'geometric', label: 'Geometric', icon: Box },
  { value: 'handwritten', label: 'Handwritten', icon: PenTool },
  { value: 'bold', label: 'Bold', icon: Zap }
]

const industryOptions = [
  { value: 'general', label: 'General' },
  { value: 'it', label: 'IT & Technology' },
  { value: 'medical', label: 'Medical & Healthcare' },
  { value: 'hospitality', label: 'Hospitality & Service' },
  { value: 'ai', label: 'AI & Machine Learning' }
]

export default function AI3DIconGenerator() {
  const [mode, setMode] = useState<'icon' | 'logo' | 'ui'>('icon')
  const [selectedStyle, setSelectedStyle] = useState('minimalist')
  const [selectedStyles, setSelectedStyles] = useState<string[]>(['minimalist']) // For composable styles
  const [selectedIndustry, setSelectedIndustry] = useState('general')
  const [customPrompt, setCustomPrompt] = useState('')
  const [negativePrompt, setNegativePrompt] = useState('')
  const [selectedTemplate, setSelectedTemplate] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedIcon, setGeneratedIcon] = useState<string | null>(null)
  const [generatedVariations, setGeneratedVariations] = useState<string[]>([])
  
  // UI Generation States
  const [uiGenerationType, setUiGenerationType] = useState<'textToUI' | 'wireframeToUI' | 'screenshotToUI'>('textToUI')
  const [selectedPlatform, setSelectedPlatform] = useState('web')
  const [selectedUIStyle, setSelectedUIStyle] = useState('modern')
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [urlInput, setUrlInput] = useState('')
  const [uiPrompt, setUiPrompt] = useState('')
  const [generatedUI, setGeneratedUI] = useState<string | null>(null)
  const [uiCode, setUiCode] = useState<string | null>(null)
  const [selectedVariation, setSelectedVariation] = useState<string | null>(null)
  const [history, setHistory] = useState<Array<{ prompt: string; url: string; timestamp: Date; type: 'icon' | 'logo' | 'ui' }>>([])
  
  // Guided prompt builder fields
  const [companyName, setCompanyName] = useState('')
  const [tagline, setTagline] = useState('')
  const [keywords, setKeywords] = useState('')
  const [preferredColors, setPreferredColors] = useState('')
  const [thingsToAvoid, setThingsToAvoid] = useState('')
  
  // Advanced editing states
  const [isUpscaling, setIsUpscaling] = useState(false)
  const [upscaledImage, setUpscaledImage] = useState<string | null>(null)
  const [isRemixing, setIsRemixing] = useState(false)
  const [editMode, setEditMode] = useState<'none' | 'inpaint' | 'outpaint'>('none')
  const [batchSize, setBatchSize] = useState(4)
  
  // Puter integration states
  const [puterInitialized, setPuterInitialized] = useState(false)
  const [puterAuthStatus, setPuterAuthStatus] = useState(false)
  const [puterFiles, setPuterFiles] = useState<PuterFile[]>([])
  const [showPuterFiles, setShowPuterFiles] = useState(false)

  // Initialize Puter on component mount
  useEffect(() => {
    const initPuter = async () => {
      const initialized = await initializePuter()
      setPuterInitialized(initialized)
      if (initialized) {
        setPuterAuthStatus(getPuterAuthStatus())
        if (getPuterAuthStatus()) {
          loadPuterFiles()
        }
      }
    }
    initPuter()
  }, [])

  const loadPuterFiles = async () => {
    try {
      const files = await getPuterFiles()
      setPuterFiles(files)
    } catch (error) {
      console.error('Failed to load Puter files:', error)
    }
  }

  const handlePuterSignIn = async () => {
    try {
      const success = await signInToPuter()
      if (success) {
        setPuterAuthStatus(true)
        await loadPuterFiles()
        toast.success('Successfully signed in to Puter!')
      }
    } catch (error) {
      toast.error('Failed to sign in to Puter')
    }
  }

  const handlePuterSignOut = async () => {
    try {
      const success = await signOutFromPuter()
      if (success) {
        setPuterAuthStatus(false)
        setPuterFiles([])
        toast.success('Successfully signed out from Puter')
      }
    } catch (error) {
      toast.error('Failed to sign out from Puter')
    }
  }

  const saveToPuter = async () => {
    if (!generatedIcon || !puterAuthStatus) return

    try {
      const filename = `3d-icon-${Date.now()}.png`
      const file = await saveIconToPuter(generatedIcon, filename)
      if (file) {
        toast.success('Icon saved to Puter storage!')
        await loadPuterFiles()
      } else {
        toast.error('Failed to save icon to Puter')
      }
    } catch (error) {
      toast.error('Failed to save icon to Puter')
    }
  }

  const handleTemplateSelect = (template: { name: string; prompt: string }) => {
    setSelectedTemplate(template.prompt)
    setCustomPrompt(template.prompt)
  }

  const getCurrentTemplates = () => {
    if (mode === 'logo') {
      return logoTemplates[selectedStyle as keyof typeof logoTemplates] || []
    }
    
    if (selectedIndustry === 'general') {
      return promptTemplates[selectedStyle as keyof typeof promptTemplates] || []
    }
    return industryTemplates[selectedIndustry as keyof typeof industryTemplates] || []
  }

  const getCurrentStyleOptions = () => {
    return mode === 'logo' ? logoStyleOptions : styleOptions
  }

  const generateIcon = async () => {
    if (!customPrompt.trim() && !companyName.trim()) {
      toast.error('Please enter a prompt or company name')
      return
    }

    setIsGenerating(true)
    try {
      const endpoint = mode === 'logo' ? '/api/generate-logo' : '/api/generate-3d-icon'
      
      // Build comprehensive prompt from guided fields
      const builtPrompt = buildComprehensivePrompt()
      
      const requestBody = mode === 'logo' 
        ? {
            prompt: builtPrompt,
            negativePrompt: negativePrompt.trim(),
            style: selectedStyles.join(', '), // Support composable styles
            industry: selectedIndustry,
            companyName: companyName.trim(),
            tagline: tagline.trim(),
            keywords: keywords.trim(),
            preferredColors: preferredColors.trim(),
            batchSize: batchSize
          }
        : {
            prompt: builtPrompt,
            negativePrompt: negativePrompt.trim(),
            style: selectedStyles.join(', '),
            batchSize: batchSize
          }

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error(`Failed to generate ${mode}`)
      }

      const data = await response.json()
      
      // Handle batch generation
      if (data.variations && Array.isArray(data.variations)) {
        setGeneratedVariations(data.variations)
        setSelectedVariation(data.variations[0])
        setGeneratedIcon(data.variations[0])
      } else {
        setGeneratedVariations([data.imageUrl])
        setSelectedVariation(data.imageUrl)
        setGeneratedIcon(data.imageUrl)
      }
      
      setHistory(prev => [{
        prompt: mode === 'logo' && companyName 
          ? `${companyName}${tagline ? ` - ${tagline}` : ''}: ${builtPrompt}`
          : builtPrompt,
        url: data.variations ? data.variations[0] : data.imageUrl,
        timestamp: new Date(),
        type: mode
      }, ...prev.slice(0, 11)]) // Keep last 12 items

      toast.success(`${batchSize} ${mode === 'logo' ? 'logo' : 'icon'} variations generated successfully!`)
    } catch (error) {
      console.error(`Error generating ${mode}:`, error)
      toast.error(`Failed to generate ${mode}. Please try again.`)
    } finally {
      setIsGenerating(false)
    }
  }

  const buildComprehensivePrompt = () => {
    let prompt = customPrompt.trim()
    
    if (mode === 'logo' && companyName.trim()) {
      prompt = `Create a professional logo for "${companyName.trim()}"${tagline ? ` with tagline "${tagline.trim()}"` : ''}. ${prompt}`
    }
    
    if (keywords.trim()) {
      prompt += `. Keywords: ${keywords.trim()}`
    }
    
    if (preferredColors.trim()) {
      prompt += `. Colors: ${preferredColors.trim()}`
    }
    
    if (thingsToAvoid.trim()) {
      setNegativePrompt(prev => prev ? `${prev}, ${thingsToAvoid.trim()}` : thingsToAvoid.trim())
    }
    
    return prompt
  }

  const upscaleImage = async () => {
    if (!selectedVariation) {
      toast.error('Please select an image to upscale')
      return
    }

    setIsUpscaling(true)
    try {
      const response = await fetch('/api/upscale-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl: selectedVariation,
          scale: 2 // 2x upscaling
        })
      })

      if (!response.ok) {
        throw new Error('Failed to upscale image')
      }

      const data = await response.json()
      setUpscaledImage(data.upscaledImageUrl)
      toast.success('Image upscaled successfully!')
    } catch (error) {
      console.error('Error upscaling image:', error)
      toast.error('Failed to upscale image')
    } finally {
      setIsUpscaling(false)
    }
  }

  const remixImage = async () => {
    if (!selectedVariation) {
      toast.error('Please select an image to remix')
      return
    }

    setIsRemixing(true)
    try {
      const response = await fetch('/api/remix-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl: selectedVariation,
          prompt: customPrompt.trim() || 'Create variations of this design',
          negativePrompt: negativePrompt.trim(),
          strength: 0.3 // Low denoising for subtle variations
        })
      })

      if (!response.ok) {
        throw new Error('Failed to remix image')
      }

      const data = await response.json()
      setGeneratedVariations(data.variations)
      setSelectedVariation(data.variations[0])
      toast.success('Image remixed successfully!')
    } catch (error) {
      console.error('Error remixing image:', error)
      toast.error('Failed to remix image')
    } finally {
      setIsRemixing(false)
    }
  }

  const vectorizeImage = async () => {
    if (!selectedVariation) {
      toast.error('Please select an image to vectorize')
      return
    }

    try {
      const response = await fetch('/api/vectorize-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl: selectedVariation
        })
      })

      if (!response.ok) {
        throw new Error('Failed to vectorize image')
      }

      const data = await response.json()
      
      // Download SVG
      const blob = new Blob([data.svgContent], { type: 'image/svg+xml' })
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `vector-${Date.now()}.svg`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      
      toast.success('Image vectorized and downloaded successfully!')
    } catch (error) {
      console.error('Error vectorizing image:', error)
      toast.error('Failed to vectorize image')
    }
  }

  const generateUI = async () => {
    if (!uiPrompt.trim() && !uploadedImage && !urlInput.trim()) {
      toast.error('Please provide a description, upload an image, or enter a URL')
      return
    }

    setIsGenerating(true)
    try {
      const requestBody: any = {
        type: uiGenerationType,
        platform: selectedPlatform,
        style: selectedUIStyle,
      }

      if (uiGenerationType === 'textToUI') {
        requestBody.prompt = uiPrompt.trim()
      } else if (uiGenerationType === 'wireframeToUI' || uiGenerationType === 'screenshotToUI') {
        if (uploadedImage) {
          requestBody.imageData = uploadedImage
        }
        if (urlInput.trim()) {
          requestBody.url = urlInput.trim()
        }
      }

      const response = await fetch('/api/generate-ui', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      })

      if (!response.ok) {
        throw new Error('Failed to generate UI')
      }

      const data = await response.json()
      setGeneratedUI(data.imageUrl)
      setUiCode(data.code || null)
      
      // Add to history
      const promptText = uiGenerationType === 'textToUI' 
        ? uiPrompt.trim()
        : uiGenerationType === 'wireframeToUI' 
        ? `Wireframe to UI: ${uploadedImage ? 'Uploaded image' : urlInput}`
        : `Screenshot to UI: ${uploadedImage ? 'Uploaded image' : urlInput}`
      
      setHistory(prev => [{
        prompt: promptText,
        url: data.imageUrl,
        timestamp: new Date(),
        type: 'ui'
      }, ...prev])
      
      toast.success('UI design generated successfully!')
    } catch (error) {
      console.error('Error generating UI:', error)
      toast.error('Failed to generate UI design')
    } finally {
      setIsGenerating(false)
    }
  }

  const downloadUI = async () => {
    if (!generatedUI) return

    try {
      const response = await fetch(generatedUI)
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `ui-design-${Date.now()}.png`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      toast.success('UI design downloaded successfully!')
    } catch (error) {
      toast.error('Failed to download UI design')
    }
  }

  const downloadUICode = () => {
    if (!uiCode) return

    const blob = new Blob([uiCode], { type: 'text/html' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `ui-code-${Date.now()}.html`
    document.body.appendChild(a)
    a.click()
    window.URL.revokeObjectURL(url)
    document.body.removeChild(a)
    toast.success('UI code downloaded successfully!')
  }

  const downloadIcon = async () => {
    const imageToDownload = upscaledImage || selectedVariation || generatedIcon
    if (!imageToDownload) return

    try {
      const response = await fetch(imageToDownload)
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${mode === 'logo' ? 'logo' : 'icon'}-${Date.now()}.png`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
      document.body.removeChild(a)
      toast.success(`${mode === 'logo' ? 'Logo' : 'Icon'} downloaded successfully!`)
    } catch (error) {
      toast.error('Failed to download image')
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <Box className="h-8 w-8 text-purple-600" />
              <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                AI 3D Icon, Logo & UI Generator
              </h1>
            </div>
            
            {/* Puter Integration Status */}
            <div className="flex items-center gap-2">
              {puterInitialized ? (
                <div className="flex items-center gap-2">
                  {puterAuthStatus ? (
                    <>
                      <Badge variant="default" className="bg-green-100 text-green-800">
                        <Cloud className="h-3 w-3 mr-1" />
                        Puter Connected
                      </Badge>
                      <Button variant="outline" size="sm" onClick={handlePuterSignOut}>
                        <LogOut className="h-4 w-4 mr-1" />
                        Sign Out
                      </Button>
                    </>
                  ) : (
                    <Button variant="outline" size="sm" onClick={handlePuterSignIn}>
                      <Cloud className="h-4 w-4 mr-1" />
                      Connect Puter
                    </Button>
                  )}
                </div>
              ) : (
                <Badge variant="secondary">
                  <CloudOff className="h-3 w-3 mr-1" />
                  Puter Unavailable
                </Badge>
              )}
            </div>
          </div>
          
          {/* Mode Selection */}
          <div className="flex justify-center mb-6">
            <Tabs value={mode} onValueChange={(value) => setMode(value as 'icon' | 'logo' | 'ui')}>
              <TabsList>
                <TabsTrigger value="icon" className="flex items-center gap-2">
                  <Box className="h-4 w-4" />
                  3D Icons
                </TabsTrigger>
                <TabsTrigger value="logo" className="flex items-center gap-2">
                  <PenTool className="h-4 w-4" />
                  Logos
                </TabsTrigger>
                <TabsTrigger value="ui" className="flex items-center gap-2">
                  <Monitor className="h-4 w-4" />
                  UI/UX Design
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </div>
          
          <p className="text-gray-600 max-w-2xl mx-auto">
            {mode === 'logo' 
              ? 'Create professional logos using AI powered by Puter.js. Perfect for businesses, brands, and personal projects.'
              : mode === 'ui'
              ? 'Generate complete UI/UX designs from text, sketches, or screenshots. Powered by AI for rapid prototyping.'
              : 'Create stunning 3D icons using AI powered by Puter.js. Choose from templates or create your own custom designs.'
            }
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Panel - Templates and Input */}
          <div className="lg:col-span-1 space-y-6">
            {/* Guided Prompt Builder */}
            {mode === 'logo' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="h-5 w-5" />
                    Guided Prompt Builder
                  </CardTitle>
                  <CardDescription>Build your logo step by step with professional guidance</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="companyName">Company Name *</Label>
                      <Input
                        id="companyName"
                        placeholder="Enter your company name"
                        value={companyName}
                        onChange={(e) => setCompanyName(e.target.value)}
                      />
                    </div>
                    <div>
                      <Label htmlFor="tagline">Tagline</Label>
                      <Input
                        id="tagline"
                        placeholder="Enter your tagline"
                        value={tagline}
                        onChange={(e) => setTagline(e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <div>
                    <Label htmlFor="keywords">Keywords</Label>
                    <Input
                      id="keywords"
                      placeholder="e.g., technology, innovation, modern, clean (comma separated)"
                      value={keywords}
                      onChange={(e) => setKeywords(e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="preferredColors">Preferred Colors</Label>
                    <Input
                      id="preferredColors"
                      placeholder="e.g., blue and white, warm colors, pastel palette"
                      value={preferredColors}
                      onChange={(e) => setPreferredColors(e.target.value)}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="thingsToAvoid">Things to Avoid</Label>
                    <Input
                      id="thingsToAvoid"
                      placeholder="e.g., text, complex details, dark colors"
                      value={thingsToAvoid}
                      onChange={(e) => setThingsToAvoid(e.target.value)}
                    />
                  </div>
                </CardContent>
              </Card>
            )}

            {/* UI Generation Controls */}
            {mode === 'ui' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Wand3 className="h-5 w-5" />
                    UI Generation Type
                  </CardTitle>
                  <CardDescription>Choose how you want to generate your UI design</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="uiGenerationType">Generation Method</Label>
                    <Select value={uiGenerationType} onValueChange={(value: any) => setUiGenerationType(value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="textToUI">
                          <div className="flex items-center gap-2">
                            <FileText className="h-4 w-4" />
                            Text to UI
                          </div>
                        </SelectItem>
                        <SelectItem value="wireframeToUI">
                          <div className="flex items-center gap-2">
                            <Edit3 className="h-4 w-4" />
                            Wireframe to UI
                          </div>
                        </SelectItem>
                        <SelectItem value="screenshotToUI">
                          <div className="flex items-center gap-2">
                            <Screenshot className="h-4 w-4" />
                            Screenshot to UI
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="platform">Target Platform</Label>
                    <Select value={selectedPlatform} onValueChange={setSelectedPlatform}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {uiPlatformOptions.map((option) => {
                          const Icon = option.icon
                          return (
                            <SelectItem key={option.value} value={option.value}>
                              <div className="flex items-center gap-2">
                                <Icon className="h-4 w-4" />
                                {option.label}
                              </div>
                            </SelectItem>
                          )
                        })}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <Label htmlFor="uiStyle">UI Style</Label>
                    <Select value={selectedUIStyle} onValueChange={setSelectedUIStyle}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {uiStyleOptions.map((option) => {
                          const Icon = option.icon
                          return (
                            <SelectItem key={option.value} value={option.value}>
                              <div className="flex items-center gap-2">
                                <Icon className="h-4 w-4" />
                                {option.label}
                              </div>
                            </SelectItem>
                          )
                        })}
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Style and Industry Selection */}
            {mode !== 'ui' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Palette className="h-5 w-5" />
                    Style & Industry
                  </CardTitle>
                  <CardDescription>Choose the visual style and industry for your 3D icon</CardDescription>
                </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="industry">Industry Category</Label>
                  <Select value={selectedIndustry} onValueChange={setSelectedIndustry}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {industryOptions.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="style">{mode === 'logo' ? 'Logo Style' : 'Icon Style'}</Label>
                  <div className="space-y-2">
                    <Select value={selectedStyle} onValueChange={setSelectedStyle}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select primary style" />
                      </SelectTrigger>
                      <SelectContent>
                        {getCurrentStyleOptions().map((option) => {
                          const Icon = option.icon
                          return (
                            <SelectItem key={option.value} value={option.value}>
                              <div className="flex items-center gap-2">
                                <Icon className="h-4 w-4" />
                                {option.label}
                              </div>
                            </SelectItem>
                          )
                        })}
                      </SelectContent>
                    </Select>
                    
                    <div className="text-sm text-gray-600">
                      <Label>Additional Styles (Optional)</Label>
                      <div className="flex flex-wrap gap-2 mt-1">
                        {getCurrentStyleOptions().filter(option => option.value !== selectedStyle).map((option) => {
                          const Icon = option.icon
                          const isSelected = selectedStyles.includes(option.value)
                          return (
                            <Button
                              key={option.value}
                              variant={isSelected ? "default" : "outline"}
                              size="sm"
                              onClick={() => {
                                if (isSelected) {
                                  setSelectedStyles(prev => prev.filter(s => s !== option.value))
                                } else {
                                  setSelectedStyles(prev => [...prev, option.value])
                                }
                              }}
                            >
                              <Icon className="h-3 w-3 mr-1" />
                              {option.label}
                            </Button>
                          )
                        })}
                      </div>
                    </div>
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="batchSize">Batch Size</Label>
                  <Select value={batchSize.toString()} onValueChange={(value) => setBatchSize(parseInt(value))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="2">2 Variations</SelectItem>
                      <SelectItem value="4">4 Variations</SelectItem>
                      <SelectItem value="6">6 Variations</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
            )}

            {/* Template Selection */}
            {mode !== 'ui' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5" />
                    Prompt Templates
                  </CardTitle>
                  <CardDescription>
                    {mode === 'logo' 
                      ? 'Quick start with pre-designed logo templates'
                      : selectedIndustry === 'general' 
                      ? 'Quick start with pre-designed templates' 
                      : `Industry-specific templates for ${industryOptions.find(opt => opt.value === selectedIndustry)?.label}`
                    }
                  </CardDescription>
                </CardHeader>
              <CardContent>
                {mode === 'logo' ? (
                  <Tabs value={selectedStyle} onValueChange={setSelectedStyle}>
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="modern">Modern</TabsTrigger>
                      <TabsTrigger value="vintage">Vintage</TabsTrigger>
                      <TabsTrigger value="luxury">Luxury</TabsTrigger>
                      <TabsTrigger value="tech">Tech</TabsTrigger>
                    </TabsList>
                    <TabsContent value={selectedStyle} className="mt-4">
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        {getCurrentTemplates().map((template, index) => (
                          <Button
                            key={index}
                            variant={selectedTemplate === template.prompt ? "default" : "outline"}
                            size="sm"
                            className="w-full justify-start text-left h-auto p-3"
                            onClick={() => handleTemplateSelect(template)}
                          >
                            <div>
                              <div className="font-medium">{template.name}</div>
                              <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </TabsContent>
                  </Tabs>
                ) : selectedIndustry === 'general' ? (
                  <Tabs value={selectedStyle} onValueChange={setSelectedStyle}>
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="minimalist">Minimalist</TabsTrigger>
                      <TabsTrigger value="realistic">Realistic</TabsTrigger>
                      <TabsTrigger value="cartoon">Cartoon</TabsTrigger>
                      <TabsTrigger value="futuristic">Futuristic</TabsTrigger>
                    </TabsList>
                    <TabsContent value={selectedStyle} className="mt-4">
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        {getCurrentTemplates().map((template, index) => (
                          <Button
                            key={index}
                            variant={selectedTemplate === template.prompt ? "default" : "outline"}
                            size="sm"
                            className="w-full justify-start text-left h-auto p-3"
                            onClick={() => handleTemplateSelect(template)}
                          >
                            <div>
                              <div className="font-medium">{template.name}</div>
                              <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </TabsContent>
                  </Tabs>
                ) : (
                  <div className="space-y-2 max-h-64 overflow-y-auto">
                    {getCurrentTemplates().map((template, index) => (
                      <Button
                        key={index}
                        variant={selectedTemplate === template.prompt ? "default" : "outline"}
                        size="sm"
                        className="w-full justify-start text-left h-auto p-3"
                        onClick={() => handleTemplateSelect(template)}
                      >
                        <div>
                          <div className="font-medium">{template.name}</div>
                          <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                        </div>
                      </Button>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Custom Prompt */}
            <Card>
              <CardHeader>
                <CardTitle>Custom Prompt</CardTitle>
                <CardDescription>Describe your ideal {mode === 'logo' ? 'logo' : '3D icon'}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="prompt">Prompt</Label>
                  <Textarea
                    id="prompt"
                    placeholder={`Describe the ${mode === 'logo' ? 'logo' : '3D icon'} you want to generate...`}
                    value={customPrompt}
                    onChange={(e) => setCustomPrompt(e.target.value)}
                    className="min-h-[100px]"
                  />
                </div>
                
                <div>
                  <Label htmlFor="negativePrompt">Negative Prompt (Optional)</Label>
                  <Textarea
                    id="negativePrompt"
                    placeholder="Describe what to avoid in the generation..."
                    value={negativePrompt}
                    onChange={(e) => setNegativePrompt(e.target.value)}
                    className="min-h-[60px]"
                  />
                </div>
                
                <Button 
                  onClick={generateIcon} 
                  disabled={isGenerating || (!customPrompt.trim() && !companyName.trim())}
                  className="w-full"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating {batchSize} Variations...
                    </>
                  ) : (
                    <>
                      <Sparkles className="mr-2 h-4 w-4" />
                      Generate {batchSize} {mode === 'logo' ? 'Logo' : 'Icon'} Variations
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
            )}

            {/* UI Templates */}
            {mode === 'ui' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5" />
                    UI Generation Templates
                  </CardTitle>
                  <CardDescription>Quick start with pre-designed UI templates</CardDescription>
                </CardHeader>
                <CardContent>
                  <Tabs value={uiGenerationType} onValueChange={(value: any) => setUiGenerationType(value)}>
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger value="textToUI">Text to UI</TabsTrigger>
                      <TabsTrigger value="wireframeToUI">Wireframe</TabsTrigger>
                      <TabsTrigger value="screenshotToUI">Screenshot</TabsTrigger>
                    </TabsList>
                    <TabsContent value={uiGenerationType} className="mt-4">
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        {uiGenerationTemplates[uiGenerationType].map((template, index) => (
                          <Button
                            key={index}
                            variant={selectedTemplate === template.prompt ? "default" : "outline"}
                            size="sm"
                            className="w-full justify-start text-left h-auto p-3"
                            onClick={() => {
                              setSelectedTemplate(template.prompt)
                              setUiPrompt(template.prompt)
                            }}
                          >
                            <div>
                              <div className="font-medium">{template.name}</div>
                              <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </TabsContent>
                  </Tabs>
                </CardContent>
              </Card>
            )}

            {/* UI Input Section */}
            {mode === 'ui' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Edit3 className="h-5 w-5" />
                    UI Design Input
                  </CardTitle>
                  <CardDescription>
                    {uiGenerationType === 'textToUI' && 'Describe the UI you want to create'}
                    {uiGenerationType === 'wireframeToUI' && 'Upload your wireframe or sketch'}
                    {uiGenerationType === 'screenshotToUI' && 'Upload a screenshot or enter a URL'}
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {uiGenerationType === 'textToUI' && (
                    <div>
                      <Label htmlFor="uiPrompt">UI Description</Label>
                      <Textarea
                        id="uiPrompt"
                        placeholder="Describe the UI design you want to create..."
                        value={uiPrompt}
                        onChange={(e) => setUiPrompt(e.target.value)}
                        className="min-h-[100px]"
                      />
                    </div>
                  )}
                  
                  {(uiGenerationType === 'wireframeToUI' || uiGenerationType === 'screenshotToUI') && (
                    <>
                      <div>
                        <Label htmlFor="imageUpload">Upload Image</Label>
                        <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                          <input
                            type="file"
                            id="imageUpload"
                            accept="image/*"
                            onChange={(e) => {
                              const file = e.target.files?.[0]
                              if (file) {
                                const reader = new FileReader()
                                reader.onload = (e) => setUploadedImage(e.target?.result as string)
                                reader.readAsDataURL(file)
                              }
                            }}
                            className="hidden"
                          />
                          <label htmlFor="imageUpload" className="cursor-pointer">
                            {uploadedImage ? (
                              <img src={uploadedImage} alt="Uploaded" className="max-h-40 mx-auto" />
                            ) : (
                              <div className="space-y-2">
                                <Upload className="h-8 w-8 mx-auto text-gray-400" />
                                <p className="text-sm text-gray-600">Click to upload an image</p>
                              </div>
                            )}
                          </label>
                        </div>
                      </div>
                      
                      {uiGenerationType === 'screenshotToUI' && (
                        <div>
                          <Label htmlFor="urlInput">Or enter URL</Label>
                          <Input
                            id="urlInput"
                            placeholder="https://example.com"
                            value={urlInput}
                            onChange={(e) => setUrlInput(e.target.value)}
                          />
                        </div>
                      )}
                    </>
                  )}
                  
                  <Button 
                    onClick={generateUI} 
                    disabled={isGenerating || (!uiPrompt.trim() && !uploadedImage && !urlInput.trim())}
                    className="w-full"
                  >
                    {isGenerating ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Generating UI Design...
                      </>
                    ) : (
                      <>
                        <Wand3 className="mr-2 h-4 w-4" />
                        Generate UI Design
                      </>
                    )}
                  </Button>
                </CardContent>
              </Card>
            )}

            {/* UI Input Section */}
            {mode === 'ui' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Edit3 className="h-5 w-5" />
                    UI Design Input
                </CardTitle>
                <CardDescription>
                  {uiGenerationType === 'textToUI' && 'Describe the UI you want to create'}
                  {uiGenerationType === 'wireframeToUI' && 'Upload your wireframe or sketch'}
                  {uiGenerationType === 'screenshotToUI' && 'Upload a screenshot or enter a URL'}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {mode === 'logo' ? (
                  <Tabs value={selectedStyle} onValueChange={setSelectedStyle}>
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="modern">Modern</TabsTrigger>
                      <TabsTrigger value="vintage">Vintage</TabsTrigger>
                      <TabsTrigger value="luxury">Luxury</TabsTrigger>
                      <TabsTrigger value="tech">Tech</TabsTrigger>
                    </TabsList>
                    <TabsContent value={selectedStyle} className="mt-4">
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        {getCurrentTemplates().map((template, index) => (
                          <Button
                            key={index}
                            variant={selectedTemplate === template.prompt ? "default" : "outline"}
                            size="sm"
                            className="w-full justify-start text-left h-auto p-3"
                            onClick={() => handleTemplateSelect(template)}
                          >
                            <div>
                              <div className="font-medium">{template.name}</div>
                              <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </TabsContent>
                  </Tabs>
                ) : selectedIndustry === 'general' ? (
                  <Tabs value={selectedStyle} onValueChange={setSelectedStyle}>
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="minimalist">Minimalist</TabsTrigger>
                      <TabsTrigger value="realistic">Realistic</TabsTrigger>
                      <TabsTrigger value="cartoon">Cartoon</TabsTrigger>
                      <TabsTrigger value="futuristic">Futuristic</TabsTrigger>
                    </TabsList>
                    <TabsContent value={selectedStyle} className="mt-4">
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        {getCurrentTemplates().map((template, index) => (
                          <Button
                            key={index}
                            variant={selectedTemplate === template.prompt ? "default" : "outline"}
                            size="sm"
                            className="w-full justify-start text-left h-auto p-3"
                            onClick={() => handleTemplateSelect(template)}
                          >
                            <div>
                              <div className="font-medium">{template.name}</div>
                              <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                            </div>
                          </Button>
                        ))}
                      </div>
                    </TabsContent>
                  </Tabs>
                ) : (
                  <div className="space-y-2 max-h-64 overflow-y-auto">
                    {getCurrentTemplates().map((template, index) => (
                      <Button
                        key={index}
                        variant={selectedTemplate === template.prompt ? "default" : "outline"}
                        size="sm"
                        className="w-full justify-start text-left h-auto p-3"
                        onClick={() => handleTemplateSelect(template)}
                      >
                        <div>
                          <div className="font-medium">{template.name}</div>
                          <div className="text-xs opacity-70 truncate">{template.prompt}</div>
                        </div>
                      </Button>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Custom Prompt */}
            <Card>
              <CardHeader>
                <CardTitle>Custom Prompt</CardTitle>
                <CardDescription>Describe your ideal {mode === 'logo' ? 'logo' : '3D icon'}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="prompt">Prompt</Label>
                  <Textarea
                    id="prompt"
                    placeholder={`Describe the ${mode === 'logo' ? 'logo' : '3D icon'} you want to generate...`}
                    value={customPrompt}
                    onChange={(e) => setCustomPrompt(e.target.value)}
                    className="min-h-[100px]"
                  />
                </div>
                <Button 
                  onClick={generateIcon} 
                  disabled={isGenerating || !customPrompt.trim()}
                  className="w-full"
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkles className="mr-2 h-4 w-4" />
                      Generate {mode === 'logo' ? 'Logo' : '3D Icon'}
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Center Panel - Result */}
          <div className="lg:col-span-1">
            <Card className="h-full">
              <CardHeader>
                <CardTitle>
                  {mode === 'ui' ? 'Generated UI Design' : `Generated ${mode === 'logo' ? 'Logos' : 'Icons'}`}
                </CardTitle>
                <CardDescription>
                  {mode === 'ui' 
                    ? 'Your AI-generated UI design and code'
                    : `Your AI-generated ${mode === 'logo' ? 'logo' : 'icon'} variations`
                  }
                </CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-center justify-center min-h-[400px]">
                {isGenerating ? (
                  <div className="flex flex-col items-center gap-4">
                    <Loader2 className="h-12 w-12 animate-spin text-purple-600" />
                    <p className="text-sm text-gray-600">
                      {mode === 'ui' ? 'Generating UI design...' : `Generating ${batchSize} variations...`}
                    </p>
                  </div>
                ) : mode === 'ui' ? (
                  generatedUI ? (
                    <div className="space-y-4 w-full">
                      <div className="relative">
                        <img
                          src={generatedUI}
                          alt="Generated UI"
                          className="w-full rounded-lg shadow-lg"
                        />
                      </div>
                      
                      {/* UI Code Display */}
                      {uiCode && (
                        <div className="space-y-2">
                          <Label>Generated Code</Label>
                          <div className="bg-gray-100 p-3 rounded-lg max-h-40 overflow-y-auto">
                            <pre className="text-xs text-gray-700">{uiCode}</pre>
                          </div>
                        </div>
                      )}
                      
                      {/* UI Actions */}
                      <div className="flex gap-2">
                        <Button onClick={downloadUI} size="sm" className="flex-1">
                          <Download className="h-4 w-4 mr-1" />
                          Download Image
                        </Button>
                        {uiCode && (
                          <Button onClick={downloadUICode} size="sm" variant="outline" className="flex-1">
                            <Code className="h-4 w-4 mr-1" />
                            Download Code
                          </Button>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="text-center">
                      <Monitor className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-600">No UI design generated yet</p>
                      <p className="text-sm text-gray-500">Create a design using the controls on the left</p>
                    </div>
                  )
                ) : generatedVariations.length > 0 ? (
                  <div className="space-y-4 w-full">
                    {/* Variations Grid */}
                    <div className="grid grid-cols-2 gap-2">
                      {generatedVariations.map((variation, index) => (
                        <div 
                          key={index}
                          className={`relative cursor-pointer rounded-lg overflow-hidden border-2 transition-all ${
                            selectedVariation === variation 
                              ? 'border-purple-500 shadow-lg' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                          onClick={() => setSelectedVariation(variation)}
                        >
                          <img
                            src={variation}
                            alt={`Variation ${index + 1}`}
                            className="w-full h-32 object-cover"
                          />
                          {selectedVariation === variation && (
                            <div className="absolute top-2 right-2 bg-purple-500 text-white rounded-full p-1">
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              </svg>
                            </div>
                          )}
                          <div className="absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                            #{index + 1}
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    {/* Selected Variation Preview */}
                    {selectedVariation && (
                      <div className="space-y-3">
                        <div className="relative group">
                          <img
                            src={selectedVariation}
                            alt={`Selected ${mode === 'logo' ? 'logo' : 'icon'}`}
                            className="w-full h-auto rounded-lg shadow-lg"
                          />
                          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all rounded-lg" />
                        </div>
                        
                        {/* Advanced Editing Tools */}
                        <div className="grid grid-cols-2 gap-2">
                          <Button onClick={remixImage} disabled={isRemixing} variant="outline" size="sm">
                            {isRemixing ? (
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            ) : (
                              <RefreshCw className="mr-2 h-4 w-4" />
                            )}
                            Remix
                          </Button>
                          <Button onClick={upscaleImage} disabled={isUpscaling} variant="outline" size="sm">
                            {isUpscaling ? (
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            ) : (
                              <Expand className="mr-2 h-4 w-4" />
                            )}
                            Upscale
                          </Button>
                          <Button onClick={vectorizeImage} variant="outline" size="sm">
                            <Layers className="mr-2 h-4 w-4" />
                            Vectorize
                          </Button>
                          <Button onClick={downloadIcon} variant="outline" size="sm">
                            <Download className="mr-2 h-4 w-4" />
                            Download
                          </Button>
                        </div>
                        
                        {puterAuthStatus && (
                          <Button onClick={saveToPuter} variant="outline" className="w-full">
                            <Cloud className="mr-2 h-4 w-4" />
                            Save to Puter
                          </Button>
                        )}
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="text-center text-gray-500">
                    {mode === 'logo' ? <PenTool className="h-16 w-16 mx-auto mb-4 opacity-50" /> : <Box className="h-16 w-16 mx-auto mb-4 opacity-50" />}
                    <p>No {mode === 'logo' ? 'logos' : 'icons'} generated yet</p>
                    <p className="text-sm">Select a template or enter a custom prompt to get started</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Right Panel - History and Puter Files */}
          <div className="lg:col-span-1">
            <Tabs defaultValue="history" className="h-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="history">History</TabsTrigger>
                <TabsTrigger value="puter" disabled={!puterAuthStatus}>
                  Puter Files
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="history">
                <Card>
                  <CardHeader>
                    <CardTitle>Generation History</CardTitle>
                    <CardDescription>
                      Your recently generated {mode === 'ui' ? 'UI designs' : mode === 'logo' ? 'logos' : '3D icons'}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3 max-h-[600px] overflow-y-auto">
                      {history.length === 0 ? (
                        <p className="text-center text-gray-500 py-8">No history yet</p>
                      ) : (
                        history
                          .filter(item => {
                            if (mode === 'ui') return item.type === 'ui'
                            return mode === 'logo' ? item.type === 'logo' : item.type === 'icon'
                          })
                          .map((item, index) => (
                          <div key={index} className="flex gap-3 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer"
                               onClick={() => {
                                 if (item.type === 'ui') {
                                   setGeneratedUI(item.url)
                                 } else {
                                   setGeneratedIcon(item.url)
                                 }
                               }}>
                            <img
                              src={item.url}
                              alt="Generated item"
                              className="w-12 h-12 rounded object-cover"
                            />
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium truncate">{item.prompt}</p>
                              <p className="text-xs text-gray-500">
                                {item.timestamp.toLocaleTimeString()} • 
                                {item.type === 'ui' ? ' UI Design' : item.type === 'logo' ? 'Logo' : 'Icon'}
                              </p>
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="puter">
                <Card>
                  <CardHeader>
                    <CardTitle>Puter Storage</CardTitle>
                    <CardDescription>Your icons saved in Puter cloud storage</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3 max-h-[600px] overflow-y-auto">
                      {puterFiles.length === 0 ? (
                        <p className="text-center text-gray-500 py-8">No files in Puter storage</p>
                      ) : (
                        puterFiles.map((file, index) => (
                          <div key={index} className="flex gap-3 p-3 border rounded-lg hover:bg-gray-50">
                            <img
                              src={file.readUrl}
                              alt={file.name}
                              className="w-12 h-12 rounded object-cover"
                            />
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium truncate">{file.name}</p>
                              <p className="text-xs text-gray-500">
                                {(file.size / 1024).toFixed(1)} KB
                              </p>
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>

        {/* Features Section */}
        <div className="mt-12 grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card>
            <CardContent className="p-6 text-center">
              <div className="h-12 w-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Sparkles className="h-6 w-6 text-purple-600" />
              </div>
              <h3 className="font-semibold mb-2">Batch Generation</h3>
              <p className="text-sm text-gray-600">Generate multiple variations at once for more creative options</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6 text-center">
              <div className="h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Settings className="h-6 w-6 text-blue-600" />
              </div>
              <h3 className="font-semibold mb-2">Guided Prompt Builder</h3>
              <p className="text-sm text-gray-600">Structured prompt creation with professional guidance</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6 text-center">
              <div className="h-12 w-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <RefreshCw className="h-6 w-6 text-green-600" />
              </div>
              <h3 className="font-semibold mb-2">Advanced Editing</h3>
              <p className="text-sm text-gray-600">Remix, upscale, and vectorize your creations</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6 text-center">
              <div className="h-12 w-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Layers className="h-6 w-6 text-orange-600" />
              </div>
              <h3 className="font-semibold mb-2">Professional Export</h3>
              <p className="text-sm text-gray-600">Multiple formats including vector SVG for scalability</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}